// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import song "github.com/antonbaumann/spotify-jukebox/song"

// SongCollection is an autogenerated mock type for the SongCollection type
type SongCollection struct {
	mock.Mock
}

// AddSong provides a mock function with given fields: newSong
func (_m *SongCollection) AddSong(newSong *song.Model) error {
	ret := _m.Called(newSong)

	var r0 error
	if rf, ok := ret.Get(0).(func(*song.Model) error); ok {
		r0 = rf(newSong)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSongByID provides a mock function with given fields: songID
func (_m *SongCollection) GetSongByID(songID string) (*song.Model, error) {
	ret := _m.Called(songID)

	var r0 *song.Model
	if rf, ok := ret.Get(0).(func(string) *song.Model); ok {
		r0 = rf(songID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*song.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSongs provides a mock function with given fields:
func (_m *SongCollection) ListSongs() ([]*song.Model, error) {
	ret := _m.Called()

	var r0 []*song.Model
	if rf, ok := ret.Get(0).(func() []*song.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*song.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSong provides a mock function with given fields: songID
func (_m *SongCollection) RemoveSong(songID string) error {
	ret := _m.Called(songID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(songID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSong provides a mock function with given fields: updatedSong
func (_m *SongCollection) UpdateSong(updatedSong *song.Model) error {
	ret := _m.Called(updatedSong)

	var r0 error
	if rf, ok := ret.Get(0).(func(*song.Model) error); ok {
		r0 = rf(updatedSong)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
