// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import song "github.com/antonbaumann/spotify-jukebox/song"

// SongCollection is an autogenerated mock type for the SongCollection type
type SongCollection struct {
	mock.Mock
}

// AddSong provides a mock function with given fields: ctx, newSong
func (_m *SongCollection) AddSong(ctx context.Context, newSong *song.Model) error {
	ret := _m.Called(ctx, newSong)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *song.Model) error); ok {
		r0 = rf(ctx, newSong)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSongByID provides a mock function with given fields: ctx, songID
func (_m *SongCollection) GetSongByID(ctx context.Context, songID string) (*song.Model, error) {
	ret := _m.Called(ctx, songID)

	var r0 *song.Model
	if rf, ok := ret.Get(0).(func(context.Context, string) *song.Model); ok {
		r0 = rf(ctx, songID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*song.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, songID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSongs provides a mock function with given fields: ctx
func (_m *SongCollection) ListSongs(ctx context.Context) ([]*song.Model, error) {
	ret := _m.Called(ctx)

	var r0 []*song.Model
	if rf, ok := ret.Get(0).(func(context.Context) []*song.Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*song.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSong provides a mock function with given fields: ctx, songID
func (_m *SongCollection) RemoveSong(ctx context.Context, songID string) error {
	ret := _m.Called(ctx, songID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, songID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceSong provides a mock function with given fields: ctx, updatedSong
func (_m *SongCollection) ReplaceSong(ctx context.Context, updatedSong *song.Model) error {
	ret := _m.Called(ctx, updatedSong)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *song.Model) error); ok {
		r0 = rf(ctx, updatedSong)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Vote provides a mock function with given fields: ctx, songID, username, scoreChange
func (_m *SongCollection) Vote(ctx context.Context, songID string, username string, scoreChange float64) (*song.Model, float64, error) {
	ret := _m.Called(ctx, songID, username, scoreChange)

	var r0 *song.Model
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *song.Model); ok {
		r0 = rf(ctx, songID, username, scoreChange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*song.Model)
		}
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(context.Context, string, string, float64) float64); ok {
		r1 = rf(ctx, songID, username, scoreChange)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, float64) error); ok {
		r2 = rf(ctx, songID, username, scoreChange)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
