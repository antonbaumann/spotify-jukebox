// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	player "github.com/encore-fm/backend/player"

	time "time"
)

// PlayerCollection is an autogenerated mock type for the PlayerCollection type
type PlayerCollection struct {
	mock.Mock
}

// GetPlayer provides a mock function with given fields: ctx, sessionID
func (_m *PlayerCollection) GetPlayer(ctx context.Context, sessionID string) (*player.Player, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *player.Player
	if rf, ok := ret.Get(0).(func(context.Context, string) *player.Player); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*player.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementProgress provides a mock function with given fields: ctx, sessionID, progress
func (_m *PlayerCollection) IncrementProgress(ctx context.Context, sessionID string, progress time.Duration) error {
	ret := _m.Called(ctx, sessionID, progress)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, sessionID, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPaused provides a mock function with given fields: ctx, sessionID
func (_m *PlayerCollection) SetPaused(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPlayer provides a mock function with given fields: ctx, sessionID, newPlayer
func (_m *PlayerCollection) SetPlayer(ctx context.Context, sessionID string, newPlayer *player.Player) error {
	ret := _m.Called(ctx, sessionID, newPlayer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *player.Player) error); ok {
		r0 = rf(ctx, sessionID, newPlayer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPlaying provides a mock function with given fields: ctx, sessionID
func (_m *PlayerCollection) SetPlaying(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
