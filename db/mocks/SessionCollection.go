// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	session "github.com/antonbaumann/spotify-jukebox/session"
)

// SessionCollection is an autogenerated mock type for the SessionCollection type
type SessionCollection struct {
	mock.Mock
}

// AddSession provides a mock function with given fields: ctx, sess
func (_m *SessionCollection) AddSession(ctx context.Context, sess *session.Session) error {
	ret := _m.Called(ctx, sess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.Session) error); ok {
		r0 = rf(ctx, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSessionByID provides a mock function with given fields: ctx, sessionID
func (_m *SessionCollection) GetSessionByID(ctx context.Context, sessionID string) (*session.Session, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *session.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessionIDs provides a mock function with given fields: ctx
func (_m *SessionCollection) ListSessionIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLastUpdated provides a mock function with given fields: ctx, sessionID
func (_m *SessionCollection) SetLastUpdated(ctx context.Context, sessionID string) {
	_m.Called(ctx, sessionID)
}
