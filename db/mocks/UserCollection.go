// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import oauth2 "golang.org/x/oauth2"
import user "github.com/antonbaumann/spotify-jukebox/user"

// UserCollection is an autogenerated mock type for the UserCollection type
type UserCollection struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, newUser
func (_m *UserCollection) AddUser(ctx context.Context, newUser *user.Model) error {
	ret := _m.Called(ctx, newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Model) error); ok {
		r0 = rf(ctx, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserCollection) GetUserByID(ctx context.Context, userID string) (*user.Model, error) {
	ret := _m.Called(ctx, userID)

	var r0 *user.Model
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.Model); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByState provides a mock function with given fields: ctx, username
func (_m *UserCollection) GetUserByState(ctx context.Context, username string) (*user.Model, error) {
	ret := _m.Called(ctx, username)

	var r0 *user.Model
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.Model); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementScore provides a mock function with given fields: ctx, username, amount
func (_m *UserCollection) IncrementScore(ctx context.Context, username string, amount int) error {
	ret := _m.Called(ctx, username, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsers provides a mock function with given fields: ctx
func (_m *UserCollection) ListUsers(ctx context.Context) ([]*user.ListElement, error) {
	ret := _m.Called(ctx)

	var r0 []*user.ListElement
	if rf, ok := ret.Get(0).(func(context.Context) []*user.ListElement); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.ListElement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetToken provides a mock function with given fields: ctx, username, token
func (_m *UserCollection) SetToken(ctx context.Context, username string, token *oauth2.Token) error {
	ret := _m.Called(ctx, username, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *oauth2.Token) error); ok {
		r0 = rf(ctx, username, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
