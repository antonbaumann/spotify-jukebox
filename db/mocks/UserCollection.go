// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import user "github.com/antonbaumann/spotify-jukebox/user"

// UserCollection is an autogenerated mock type for the UserCollection type
type UserCollection struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: newUser
func (_m *UserCollection) AddUser(newUser *user.Model) error {
	ret := _m.Called(newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.Model) error); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: username
func (_m *UserCollection) GetUser(username string) (*user.Model, error) {
	ret := _m.Called(username)

	var r0 *user.Model
	if rf, ok := ret.Get(0).(func(string) *user.Model); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementScore provides a mock function with given fields: username, amount
func (_m *UserCollection) IncrementScore(username string, amount float64) error {
	ret := _m.Called(username, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(username, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUsers provides a mock function with given fields:
func (_m *UserCollection) ListUsers() ([]*user.ListElement, error) {
	ret := _m.Called()

	var r0 []*user.ListElement
	if rf, ok := ret.Get(0).(func() []*user.ListElement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.ListElement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
